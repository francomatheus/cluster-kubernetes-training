apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort #(ClusterIP, NodePort, LoadBalancer, ExternalName)
  selector:
    app: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376


# Portas
# ClusterIP: Expoe o serviço internamente no cluster com um IP
# NodePort: Expoe o serviço em cada nó com um ip estatico (intervalo de porta: 30000-32767)
# LoadBalancer: Expoe o serviço externamente utilizando um load balancer (Como se fosse NodePort + ClusterIP)
# ExternalIP: Mapea o serviço contendo um nome externo. 
#
# Você pode usar um Ingress para expor seu serviço. Ingress não é um tipo de serviço, mas é um ponto de entrada para o cluster. 

---

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: MyApp
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 30007

---

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9376
  clusterIP: 10.0.171.239
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 192.0.2.127

---

apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: prod
spec:
  type: ExternalName
  externalName: my.database.example.com

---

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
  externalIPs:
    - 80.11.12.10